{"pages":[{"title":"404","text":"","link":"/blog/404/index.html"},{"title":"about","text":"基本信息 abbott/男/汉/1988 Email: xsun00116@gmail.com 个人博客：abbott68 职业专长：云计算，Linux/DevOps/Kubernetes","link":"/blog/about/index.html"},{"title":"categories","text":"","link":"/blog/categories/index.html"},{"title":"jiankong","text":"","link":"/blog/jiankong/index.html"},{"title":"欢迎留言","text":"","link":"/blog/message/index.html"},{"title":"nginx","text":"nginx服务器搭建nginx是什么     我们在学习Nginx时也采用同样的方式,先来看看Nginx的竞争对手——Apache、Lighttpd、Tomcat、Jetty、IIS,它们都是Web服务器,或者叫做WWW(World Wide Web)服务器,相应地也都具备Web服务器的基本功能:基于REST架构风格 [1] ,以统一资源描述符(Uniform Resource Identifier,URI)或者统一资源定位符(Uniform Resource Locator,URL)作为沟通依据,通过HTTP为浏览器等客户端程序提供各种网络服务。     Tomcat和Jetty面向Java语言,先天就是重量级的Web服务器,它的性能与Nginx没有可比性。 apache的特点     Apache有许多优点,如稳定、开源、跨平台等,但它出现的时间太长了,在它兴起的年代,互联网的产业规模远远比不上今天,所以它被设计成了一个重量级的、不支持高并发的Web服务器。 为什么选择Nginx 更快这表现在两个方面:一方面,在正常情况下,单次请求会得到更快的响应;另一方面,在高峰期(如有数以万计的并发请求),Nginx可以比其他Web服务器更快地响应请求； 高扩展性Nginx的设计极具扩展性,它完全是由多个不同功能、不同层次、不同类型且耦合度极低的模块组成； 高可靠性高可靠性是我们选择Nginx的最基本条件,因为Nginx的可靠性是大家有目共睹的,很多家高流量网站都在核心服务器上大规模使用Nginx； 低内存消耗一般情况下,10000个非活跃的HTTP Keep-Alive连接在Nginx中仅消耗2.5MB的内存,这是Nginx支持高并发连接的基础； 单机支持10万以上的并发连接这是一个非常重要的特性!随着互联网的迅猛发展和互联网用户数量的成倍增长,各大公司、网站都需要应付海量并发请求,一个能够在峰值期顶住10万以上并发请求的Server,无疑会得到大家的青睐； 热部署master管理进程与worker工作进程的分离设计,使得Nginx能够提供热部署功能,即可以在7×24小时不间断服务的前提下,升级Nginx的可执行文件； 最自由的BSD许可协议这是Nginx可以快速发展的强大动力。BSD许可协议不只是允许用户免费使用Nginx,它还允许用户在自己的项目中直接使用或修改Nginx源码,然后发布； Apache拥有丰富的模块组件支持，稳定性强，BUG少，动态内容处理强。 Nginx轻量级，占用资源少，负载均衡，高并发处理强，静态内容处理高效 部署Nginx服务官网获取软件包下载适合您的版本以下是做测试用的版本 # wget http://nginx.org/download/nginx-\u00101.15.5.tar.gz 如果您的主机上没有wget命令请安装Centos RedHat 版本\u0010: # sudo yum -y install wget ubuntu Depin系列: # sudo apt install wget 安装：# mkdir /usr/local/nginx # mv nginx-1.15.5.tar.gz /usr/local/nginx/ # cd /usr/local/nginx/ # tar xf nginx-1.15.5.tar.gz # cd nginx-1.15.5 # yum -y install gcc gcc-c++ pcre-devel zlib-devel # ./configure --prefix=/usr/local/nginx/ # make &amp;&amp; make install 启动服务/usr/local/nginx/sbin/nginx 选项 nginx -s stop|quit|raload|reopen 解释 stop — fast shutdown                                # 快速关机 quit — graceful shutdown                          # 优雅关机 reload — reloading the configuration file     # 重新加载配置文件 reopen — reopening the log files               # 重新代开日志文件 查看服务:默认是80端口ps -ax | grep nginx 搭建虚拟主机创建虚拟主机配置文件# mkdir /usr/local/nginx/html/{gtxi,gtjb} # echo &quot;gongtongxuexi.com&quot; &gt; /usr/local/nginx/html/gtxi/index.html # echo &quot;gongtongjinbu.com&quot; &gt; /usr/local/nginx/html/gtjb/index.html 编辑配置文件：配置文件所在位置 /usr/local/nginx/conf/nginx.conf在配置文件定义虚拟主机加入: server { listen 8080; # listen somename:8080; server_name www.gongtongxuexi.com; location / { root html/gtxi; index index.html index.htm; } } server { listen 8081; # listen somename:8080; server_name www.gongtongjinbu.com; location / { root html/gtjb; index index.html index.htm; } } 重新加载配置文件： /usr/local/nginx/sbin/nginx -s raload 验证：打开浏览器访问 http//iP地址 配置文件解释：keepalive_timeout 65; # 设置连接超时时间 # 使用server定义虚拟主机 server { listen 80; # 监听端口 server_name localhost; # 访问域名 #charset koi8-r; # 编码格式 # 设置虚拟主机的访问日志 #access_log logs/host.access.log main; # 对URL进行匹配 location / { # 设置网页根路径 root html; # 先找html文件，如果没有则htm index index.html index.htm; } HTTPS server # #server { # listen 443 ssl; 监听端口 # server_name localhost; 访问域名 指定证书文件，使用相对路径证书需要在与Nginx.conf同目录下 # ssl_certificate cert.pem; # ssl_certificate_key cert.key; 指定会话缓存 # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / { # root html; # index index.html index.htm; # } 网站的错误代码： 1xx:代表提示信息 2xx:代表成功信息 3xx:代表重定向 4XX：代表客户端错误信息 5xx:代表服务器错误信息 Nginx实现反向代理代理服务器1、什么是代理服务器代理服务器，客户机在发送请求时，不会直接发送给目的主机，而是先发送给代理服务器，代理服务接受客户机请求之后，再向主机发出，并接收目的主机返回的数据，存放在代理服务器的硬盘中，再发送给客户机。2、为什么要使用代理服务器1）提高访问速度由于目标主机返回的数据会存放在代理服务器的硬盘中，因此下一次客户再访问相同的站点数据时，会直接从代理服务器的硬盘中读取，起到了缓存的作用，尤其对于热门站点能明显提高请求速度。2）防火墙作用 由于所有的客户机请求都必须通过代理服务器访问远程站点，因此可在代理服务器上设限，过滤某些不安全信息。3）通过代理服务器访问不能访问的目标站点 互联网上有许多开发的代理服务器，客户机在访问受限时，可通过不受限的代理服务器访问目标站点，通俗说，我们使用的翻墙浏览器就是利用了代理服务器，虽然不能出国，但也可直接访问外网。 反向代理 VS 正向代理1、什么是正向代理？什么是反向代理？ 正向代理，架设在客户机与目标主机之间，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。 反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器的工作量，将客户机请求转发给内部网络上的目标服务器；并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器与目标主机一起对外表现为一个服务器。 2、反向代理有哪些主要应用？ 现在许多大型web网站都用到反向代理。除了可以防止外网对内网服务器的恶性攻击、缓存以减少服务器的压力和访问安全控制之外，还可以进行负载均衡，将用户请求分配给多个服务器。 upstream web1.com{ server 192.168.122.206; } upstream web2.com{ server 192.168.122.84; } server { listen 80; # listen someme:8080; server_name www.web1.com; location / { proxy_pass http://web1.com; index index.html index.htm; } } server { listen 80; # listen somename:8080; server_name www.web2.com; location / { proxy_pass http://web2.com; index index.html index.htm; } }","link":"/blog/nginx/index.html"},{"title":"schedule","text":"","link":"/blog/schedule/index.html"},{"title":"tags","text":"","link":"/blog/tags/index.html"}],"posts":[{"title":"Ansible","text":"Ansible*简介Ansible 安装使用非常简单，而且基于上千个插件和模块，实现各种软件、平台、版本的管理，支持虚拟容器多层级的部署。 Ansible自动化工具原理 Ansible 是一款极为灵活的开源工具套件，能够大大简化UNIX管理元的自动化配置管理与流程控制方式，他利用推送方式对客户系统加以配置，这样所有工作都可在服务器端完成。命令行机制同样非常强大，允许大家利用商业许可WEB UI 实现授权管理与配置，通过ansible进行管理的服务。 Ansible与2015年被Red Hat公司以1.5亿美元收购； Ansible 自动运维管理工具优点： 轻量级，更新时只需要在操作机上进行一次更新即可； 采用SSH协议； 不需要客户端安装agent； 批量任务执行可以写成脚本，而且不用分发到远程客户端； 使用python编写，维护更简单； 支持sudo普通用户命令； 去中心化管理。 Ansible 自动化管理工具原理拓补图：","link":"/blog/2021/07/18/Ansible/"},{"title":"Grafana","text":"Grafana 入门官方帮助手册 这儿 什么是GrafanaGrafana是开源的可视化和分析软件。它使您可以查询，可视化，警报和浏览指标，无论它们存储在哪里。用简单的英语，它为您提供了将时间序列数据库（TSDB）数据转换为精美的图形和可视化效果的工具。 检索指标和日志通过临时查询和动态明细浏览数据。拆分视图并排比较不同的时间范围，查询和数据源 通讯如果您正在使用Grafana警报，则可以通过许多不同的警报通知程序发送警报，包括电子邮件、SMS等方式；警报挂钩可让您通过一些代码来创建不同的通知程序，以可视方式定义最重要指标的警报规则。 注释使用来自不同数据源的丰富事件注释图形。将鼠标悬停在事件上可以常看完整的事件元数据和标签。 仪表盘变量模板变量允许您创建仪表板，这些仪表板可用于许多不同的用例，值不是用这些模板硬编码的，因此例如，如果您有生产服务器和测试服务器，则可以为这两者使用相同的仪表板。 配置Grafana配置涵盖配置文件和环境变量，您可以设置默认端口，日志记录级别，电子邮件IP地址，安全性等； 导入仪表板和插件在官方库中里有数百个仪表板和插件，由于社区成员的热情和动力，每周都会增加新成员。 安装Grafana要求：Grafana的最低硬件和软件（配置）要运行Grafana,您必须具有受支持的操作系统，满足或大于最低要求的硬件，受支持的数据库和受支持的浏览器。 支持的操作系统Grafana安装支持一下操作系统： Debian/Ubuntu 基于RPM的Linux（CentOS,Fedora,OpenSuse,RedHat） 苹果系统 Windows 硬件的要求Grafana不会使用大量资源，并且字使用内存和CPU时非常轻巧。建议最小内存：255MB 建议最小CPU：1某些功能可以能需要更多的内存或者CPU。功能需要跟多资源，包括 服务器端图像渲染 报警 数据源代理 支持的数据库Grafana需要一个数据库来存储其配置数据，例如用户，数据源和仪表板，确切的要求取决于Grafana安装的大小和使用的功能Grafana支持以下数据库： SQLite MySQL PostgreSQL默认情况下，Grafana随SQLite一起安装并使用SQLite，SQLite是存储Grafana安装位置中的嵌入式数据库。支持的浏览器 chrome/Chromium Firefox Safari Microsofr Edge Internet Explorer 11 is only fully supported in Grafana versions prior v6.0. 基于RPM的Linux（CentOS,Fedora,OpenSuse,RedHat）安装现在并安装您可以使用YUM仓库中安装Grafana，可以手动使用YUM，手动使用RPM或者下载二进制.tar.gz文件。 使用YUM手动安装如果使用YUM手动安装，则需要为每个新版本手动更新Grafana。要为您的Grafana安装启用自动更新，请按照以下说明通过我们的YUM存储库进行安装。 点击这儿官网下载适合您的平台下载软件包并安装 # wget https://dl.grafana.com/oss/release/grafana-7.3.6-1.x86_64.rpm # sudo yum install grafana-7.3.6-1.x86_64.rpm -y 启动服务并开机自启 # systemctl enable grafana-server --now 查看服务服务是否正常运行，端口号默认3000 # ss -luntp| grep grafana # systemctl status grafana-server 添加防火墙规则 # firewall-cmd --permanent --add-port=3000/tcp # firewall-cmd --reload Grafana应该就可以开始访问了。您还应该能够在http：//server-ip:3000上浏览到有关其自身的状态页面默认登录用户名（admin）密码（admin） 选择您的配置选项 Grafana后端在其配置文件（通常在Linux系统上位于/etc/grafana/grafana.ini中)在此配置文件中，您可以更改默认管理员密码，http端口，grafana数据库（sqlite3，mysql，postgres），身份验证选项（google，github，ldap，auth proxy）以及许多其他选项。 启动您的grafana服务器。用您的管理员用户登录（默认为admin / admin）。打开侧面菜单（单击顶部菜单中的Grafana图标），转到数据源，然后添加数据源。 更改Grafana密码 将鼠标悬停在屏幕左下角的用户图标上。 点击更改密码。Grafana将打开“更改密码”选项卡。 输入您的旧密码以授权更改。 输入新密码，然后确认密码。 点击更改密码。","link":"/blog/2021/07/21/Grafana/"},{"title":"MySQL","text":"MySQL 介绍 MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 [Oracle](https://baike.baidu.com/item/Oracle) 旗下产品。MySQL 是最流行的[关系型数据库管理系统](https://baike.baidu.com/item/关系型数据库管理系统/696511)之一，在 WEB 应用方面，MySQL是最好的 [RDBMS](https://baike.baidu.com/item/RDBMS/1048260) (Relational Database Management System，关系数据库管理系统) 应用软件之一。 MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。 MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。 MySQL是目前最流行的关系型数据库管理系统。它分为社区版和商业版。由于其体积小、速度快、应用成本低、尤其是开发源代码这一特点，使其成为中小型网站开发首选的数据库平台。但是，甲骨文公司收购了MySQL后，又将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险，MariaDB数据库就是MySQL的一个分支。在RHEL 7.0版本之后，系统自带的数据库由MySQL替换为MariaDB数据库，MariaDB主要由开源社区维护，采用GPL授权社区。 特性 使用C和C++编写，并使用了多种编译器进行测试，保证源代码的可移植性。 支持AIX、BSDi、FreeBSD、HP-UX、Linux、Mac OS、Novell NetWare、NetBSD、OpenBSD、OS/2 Wrap、Solaris、Windows等多种操作系统。 为多种编程语言提供了API。这些編程语言包括C、C++、C#、VB.NET、Delphi、Eiffel、Java、Perl、PHP、Python、Ruby和Tcl等。 支持多线程，充分利用CPU资源，支持多用户。 优化的SQL查询算法，有效地提高查询速度。 既能够作为一个单独的应用程序在客户端服务器网络环境中运行，也能够作为一个程序库而嵌入到其他的软件中。 提供多语言支持，常见的编码如中文的GB 2312、BIG5，日文的Shift JIS等都可以用作数据表名和数据列名。 提供TCP/IP、ODBC和JDBC等多种数据库连接途径。 提供用于管理、检查、優化数据库操作的管理工具。 可以处理拥有上千万条记录的大型数据库。 历史 1979年 Monty Widenius 为一个叫TcX的小公司打工，并用BASIC设计了一个报表工具,可以在4M主频和16KB内的计算机上运行，过了不久使用C语言重写，移植到Unix平台，当时，它只是一个很底层的面向报表的存储引擎，这个工具叫做Unireg; 1985 年，瑞典的几位志同道合小伙子（以David Axmark 为首） 成立了一家公司，这就是MySQL AB 的前身;这个公司最初并不是为了开发数据库产品，而是在实现他们想法的过程中，需要一个数据库。他们希望能够使用开源的产品; 1990年，TcX的customer 中开始有人要求要为它的API提供SQL支持，当时，有人想到了直接使用商用数据库算了，但是Monty觉得商用数据库的速度难令人满意.于是，他直接借助于mSQL的代码，将它集成到自己的存储引擎中。但不巧的是，效果并不太好。于是,Monty雄心大起，决心自己重写一个SQL支持。 1996年，MySQL 1.0发布, 在小范围内使用。到了96年10月，MySQL 3.11.1发布了，没有2.x版本。最开始，只提供了Solaris下的二进制版本。一个月后，Linux版本出现了。 此时的MySQL还非常简陋，除了在一个表上做一些Insert，Update，Delete和Select 操作职位，没有其他更多的功能。 1999-2000年，有一家公司在瑞典成立了，叫MySQL AB。 雇了几个人,与Sleepycat合作，开发出了 Berkeley DB引擎, 因为BDB支持事务处理，所以，MySQL从此开始支持事务处理了。 2000年，MySQL 公布了自己的源代码，并采用GPL（GNU General Public License）许可协议，正式进入开源世界。 2001年发布的3.23 版本的时候，该版本已经支持大多数的基本的SQL 操作，而且还集成了MyISAM和InnoDB 存储引擎。MySQL与InnoDB的正式结合版本是4.0。 2004年10月，发布了经典的4.1版本。 2005年10月，有发布了里程碑的一个版本，MySQL 5.0. 在5.0中加入了游标，存储过程，触发器，视图和事务的支持。在5.0 之后的版本里，MySQL明确地表现出迈向高性能数据库的发展步伐。 2008年1月16号 MySQL被Sun公司收购。 2009年04月20日Oracle收购Sun 公司，MySQL 转入Oracle 门下。 2010年04月22 发布MySQL 5.5, MySQLcluster 7.1. MySQL管理 可以使用命令行工具管理MySQL数据库（命令mysql和mysqladmin），也可以从MySQL的网站下载图形管理工具MySQL Workbench； Navicat是一套专为MySQL设计的强大数据库管理及开发工具。它可以用于任何版本的MySQL数据库，并支持大部分MySQL的功能，包括触发器、索引、查看等； phpMyAdmin是由PHP写成的MySQL数据库系统管理程序，让管理者可用Web接口管理MySQL数据库。借由此Web接口可以成为一个简易方式输入繁杂SQL语法的较佳途径，尤其要处理大量资料的导入及导出更为方便。其中一个更大的优势在于由于phpMyAdmin跟其他PHP程序一样在网页服务器上运行，但是您可以在任何地方使用这些程序产生的HTML页面，也就是于远程管理你的MySQL数据库。使用phpMyAdmin您就可以方便的创建、修改、删除数据库及资料表； phpMyBackupPro也是由PHP写成的，可以通过Web接口创建和管理数据库。它可以创建伪cronjobs，可以用来自动在某个时间或周期备份MySQL数据库。 连接方式 应用程序可通过ODBC或ADO方式，经由使用MyODBC与MySQL数据库连接； MS .Net Framework下的程序（例如：C#、VB.NET）可通过ADO.NET的方式，经由使用MySQL.Net（页面存档备份，存于互联网档案馆）与MySQL数据库连接； C/C++可使用MySQL++（页面存档备份，存于互联网档案馆）或是直接使用MySQL内置API与MySQL数据库连接； PHP可通过PHP的MySQLi与MySQL数据库连接，具备比MySQL模块（页面存档备份，存于互联网档案馆）更好的性能。另外PHP6可使用mysqlnd与MySQL数据库连接； JAVA程序可通过JDBC方式与MySQL进行连接，MySQL官方提供了JDBC驱动程序； 可通过MySQL客户端软件与MySQL进行连接，如mysqlfront、mysqlyog、mysqlbrowser等； javascript可以通过使用fibjs的内置mysql模块[2]（页面存档备份，存于互联网档案馆）与MySQL数据库连接。 派生版本 Drizzle ① 介绍 Drizzle，一个精简版的MySQL分支，在目前的MySQL代码基本之上，将存储过程、视图、触发器、查询缓存、PREPARE语句等等没什么必要的功能从代码中删掉，简化对数据类型和存储引擎的支持，并且进行大胆的重构。最终要实现的目的是将MySQL的代码大大简化，理顺MySQL的架构，改善MySQL的代码质量，提高系统的稳定性和性能。将更适合 Web应用、云计算组件、没有业务逻辑的数据库（又名存储过程）、多核架构 等业务 ②特性： 现在的目标是针对某类应用 / 开发人员，看看对他们是否真的有帮助。举例来说，Drizzle 的目标有： Web 应用。 云计算组件。 没有业务逻辑的数据库（又名存储过程）。 多核架构。 基于 MySQL 6.0 的源码树 无附加库 遵守 POSIX 微内核设计 可插拔架构，适用于视图、存储过程、UDF、存储引擎等 跨多个节点的 Sharding 技术 智能代理 多 CPU/ 多核 CPU 优化的字段类型 高效的内存使用 没有内部 ACL，使用 LDAP/PAM 没有数据库数据格式化 整理有序的 Make 系统 缺省存储引擎为 InnoDB 移除 Windows 兼容性 哲学上更大的差异 采用外部库，采用开源软件的机制编写代码，保持开放式的沟通，消除了内部开发和外部开发之间的界限。本质上讲，做到了我一直倡导的“朴实的开源”。我们主要针对 C99、POSIX、基于自动化工具（Autotools）的系统。我们完全采用了微内核设计，将代码移出核心，通过接口将其推向边缘。我们在模块间采用了类似于 Linux/Apache 的紧耦合设计。 查看英文原文：Drizzle - a new direction for databases MariaDB MariaDB是MySQL关系数据库管理系统的一个复刻，由社区开发，有商业支持，旨在继续保持在GNU GPL下开源。MariaDB的开发是由MySQL的一些原始开发者领导的，他们担心甲骨文公司收购MySQL后会有一些隐患。 MariaDB打算保持与MySQL的高度兼容性，确保具有库二进制奇偶校验的直接替换功能，以及与MySQL API和命令的精确匹配。MariaDB自带了一个新的存储引擎Aria，它可以替代MyISAM，成为默认的事务和非事务引擎。它最初使用XtraDB作为默认存储引擎， 并从10.2版本切换回InnoDB。 它的首席开发人员是米卡埃尔·维德纽斯，他是MySQL AB的创始人之一，也是Monty Program AB的创始人。2008年1月16日，MySQL AB 宣布它已经同意被Sun微系统集团以大约10亿美元的价格收购。该项收购已于2008年2月26日完成。MariaDB是以Monty的小女儿Maria命名的，就像MySQL是以他另一个女儿My命名的一样。 版本 MariaDB直到5.5版本，均依照MySQL的版本。因此，使用MariaDB5.5的人会从MySQL 5.5中了解到MariaDB的所有功能。 从2012年11月12日起发布的10.0.0版开始，不再依照MySQL的版号。10.0.x版以5.5版为基础，加上移植自MySQL 5.6版的功能和自行开发的新功能 版本 原始发布日期 最新版本 发布日期 状态 5.1 2009年10月29日[11] 5.1.67 2013年1月30日[12] Stable (GA) 5.2 2010年4月10日[13] 5.2.14 2013年1月30日[14] Stable (GA) 5.3 2011年7月26日[15] 5.3.12 2013年1月30日[16] Stable (GA) 5.5 2012年2月25日[17] 5.5.68 2020年5月12日[18] Stable (GA) 10.0 2012年11月12日[19] 10.0.38 2019年1月31日[20] Stable (GA) 10.1 2014年6月30日[21] 10.1.48 2020年11月4日[22] Stable (GA) 10.2 2016年4月18日[23] 10.2.39 2021年6月23日[24] Stable (GA) 10.3 2017年4月16日[25] 10.3.30 2021年6月23日[24] Stable (GA) 10.4 2018年11月9日[26] 10.4.20 2021年6月23日[24] Stable (GA) 10.5 2019年12月3日[27] 10.5.11 2021年6月23日[24] Stable (GA) 10.6 2021年4月26日[28] 10.6.3 2021年7月6日[29] Stable (GA) Percona Server OurDelta 安装部分一、源码安装mysql二、二进制安装MySQL三、通过YUM安装MySQL","link":"/blog/2021/07/16/MySQL/"},{"title":"Apache","text":"Apache web服务器什么是Web服务器     万维网(world wide web, WWW)服务器，也成为Web服务器，主要功能是提供网上浏览服务，WWW是internet的多媒体信息查询工具，是Inernet上飞速发展的服务，也是目应用最广泛的服务，正是因为有了WWW软件，才使得近年来internet迅速发展。     目前主流的Web服务器软件包括Apache | Nginx | Lighttpd | IIS | Resin | Tomcat |WebLogic|Jetty等。首先先介绍Apache web服务器发展历史、工作模式、虚拟主机、配置文件等内容； Apache web 服务器简介     Apache HTTP server是Apache软件基金会的一个开源的网站服务器，可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是目前最流行的Web服务器软件之一。     Apache服务器是一个多模块化的服务器，经过多次修改，成为目前世界使用排名第一的Web服务器软件。Apache取自”a patchy server”的读音，即充满补丁的服务器，因为Apache基于GPL发布，大量开发者不断为Apache贡献新的代码、功能、新的特性、修改原来的缺陷。Apache服务器的特点是使用简单、速度快、性能稳定，可以作为负载均衡及代理服务器来使用。 工作模式       Apache就向汽车一样都有发动机引擎，不同的引擎，对车子运行效率也不一样，同样Apache也是有类似工作引擎或者处理请求的模块，称之为多路处理模块（multi-proceessing modules,MPM）Apache web服务器有三种处理模块：Profork MPM | Worker MPM | Event MPM 工作模式； Event MPM 工作模式：     不支持HTTPS方式，所以Event MPM很少使用； Profork MPM工作模式：      控制进程master在最初建立“StartServers”个进程后，为了满足MinSpareServers设置的最小空闲进程，所以需创建一个空闲进程，等待一秒钟，继续创建两个，再等待一秒钟，继续创建四个 ，依次按照递增指数级创建进程数，最多每秒 同时创建32个空闲进程，直到满足至少有MinSpareServers设置的值为止。      Apache的预派生模式(Prefork),基于预派生模式不必在请求到来时再产生新的进程，从而减小了系统开销以增加性能，不过由于Prefrok MPM引擎是基于多进程方式提供对外服务，每个进程占内存也相对较高。 Worker MPM工作模式:     控制进程master在最初建立“StartServers”个进程，每个进程会创建ThreadsPerChild设置的线程数，多个线程共享该进程内存空间，同时每个进程独立地处理用户的HTTP请求。为了不在请求到来时再生成线程，Worker MPM也可以设置最大最小空闲线程。 Profork MPM与Worker MPM引擎区别如下： Profork MPM 模式：使用多个进程，每个进程只有一个线程，每个进程在某个确定的时间只能维持一个连接，优点是稳定，当内存开销较高； Worker MPM模式：使用多个进程，每个进程包含多个进程，每个线程在某个确定的时间只能维持一个连接，内存占有量比较小，适合大并发、高流量的Web服务器。Worker MPM缺点是一个线程奔溃，整个进程就会 连同其任何线程一起挂掉。 Apache Web服务器搭建Apache官网获取安装下载适合您的版本 搭建Apache web服务器一、部署web站点(1)安装依赖 # yum -y install wget make gcc gcc-c++ pcre openssl openssl-devel zlib unzip # yum -y install cmake ncurses-devel libjpeg libjpeg-devel libpng libpng-devel libxml2 # yum -y install libxml2-devel curl-devel libtool libtool-ltdl libtool-ltdl-devel libevent libevent-devel # yum -y install zlib-static zlib-devel autoconf pcre-devel gd perl expat-devel 创建存放文件夹 # mkdir -p /usr/local/apache1/{apr,apr-util,http} (2)获取软件包 # wget https://mirror.bit.edu.cn/apache//apr/apr-1.7.0.tar.gz # wget https://mirror.bit.edu.cn/apache//apr/apr-util-1.6.1.tar.gz # wget https://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.46.tar.gz (3)安装apr # cd /usr/local/apache1/apr # tar xf apr-1.7.0.tar.gz &amp;&amp; cd apr-1.7.0 # ./configure --prefix=/usr/local/apache1/apr # make # make install (4)安装apr-util # cd /usr/local/apache1/apr-util # tar xf apr-util-* &amp;&amp; cd apr-util-* # ./configure --prefix=/usr/local/apache1/apr/apr-util --with-apr=/usr/local/apache1/apr &amp;&amp; make &amp;&amp; make install (5)安装apache # cd /usr/local/apache1/http # tar xf httpd-* &amp;&amp; cd httpd-* # ./configure --prefix=/usr/local/apache1/http \\ --sysconfdir=/etc/httpd/ \\ --with-include-apr \\ --disable-userdir \\ --enable-headers \\ --with-mpm=worker \\ --enable-modules=most \\ --enable-so \\ --enable-deflate \\ --enable-defate=shared \\ --enable-expires-shared \\ --enable-rewrite=shared \\ --enable-static-support \\ --with-apr=/usr/local/apache1/apr/ \\ --with-apr-util=/usr/local/apache1/apr/apr-util \\ --with-ssl \\ --with-z (6)编译并安装 # make # make install (7)启动服务进程 # /usr/local/apache1/apache/bin/apachectl start （8）添加防火墙规则 # firewall-cmd --permanent --add-port=80/tcp --zone=public # firewalld-cmd --reload （9）启动Apache # /usr/local/apache1/http/bin/apachectl （10）查看端口号是否开启 Apache默认端口是80 # ss -luntp | grep 80 （11）测试 你现在应该就可以通过浏览器访问 http://server-ip/ Apache虚拟主机应用一台web服务器发布单个网站非常浪费资源，所以一台web服务器上会发布多个网站，在一台服务器上发布多个网站，也称之为部署多个虚拟主机，web虚拟主机配置方法有三种： 基于单个IP地址多个socket端口； 基于多个IP地址一个端口； 基于单个IP地址一个端口不同域名。 启动基于同一端口不同域名的方式在企业中得到广泛应用，以下为基于一个端口不同域名，在一台Apache web服务器上部署多个网站，步骤如下： 修改虚拟主机配置文件 Apache常用目录解释Apache可以基于源码安装、YUM安装，不同方法安装，所属的路径有所不同，以下为Apache常用路径的功能用途：","link":"/blog/2021/07/16/Apache/"},{"title":"MySQL部署（源码编译）","text":"MySQL8.0.25 源码编译部署 环境介绍 centos 8.3 数据库版本：MySQL-8.0.25 gcc版本： 7系列系统默认GCC版本低不支持安装MySQL8以上版本的数据，需要升级GCC版本， 8系列版本的系统不需要升级GCC 如果需要如何升级 点这 安装cmake工具[root@test mysql-8.0.25]# dnf -y install cmake3 源码编译[root@test mysql-8.0.25]# cmake . \\ -DCMAKE_INSTALL_PREFIX=/usr/local/mysql/ \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci \\ -DENABLED_LOCAL_INFILE=ON \\ -DWITH_INNODB_MEMCACHED=ON \\ -DWITH_SSL=system \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_FEDERATED_STORAGE_ENGINE=1 \\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\ -DWITH_ARCHIVE_STORAGE_ENGINE=1 \\ -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\ -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \\ -DCOMPILATION_COMMENT=&quot;zsd edition&quot; \\ -DWITH_BOOST=/usr/local/mysql/mysql-8.0.25/boost/boost_1_73_0/ \\ -DMYSQL_UNIX_ADDR=/usr/local/mysql/3306/mysql.sock \\ -DSYSCONFDIR=/usr/local/mysql/data/3306 \\ -DFORCE_INSOURCE_BUILD=1 报错: 一、警告不要在源码中构建 CMake Error at CMakeLists.txt:382 (MESSAGE): Please do not build in-source. Out-of source builds are highly recommended: you can have multiple builds for the same source, and there is an easy way to do cleanup, simply remove the build directory (note that 'make clean' or 'make distclean' does *not* work) You *can* force in-source build by invoking cmake with -DFORCE_INSOURCE_BUILD=1 二、缺少依赖 ① CMake Error at cmake/ssl.cmake:61 (MESSAGE): PleaseCMake Error at cmake/readline.cmake:71 (MESSAGE): ② Curses library not found. Please install appropriate package, install the appropriate openssl developer package. remove CMakeCache.txt and rerun cmake.On Debian/Ubuntu, package name is libncurses5-dev, on Redhat and derivates it is ncurses-devel. ③ CMake Warning at cmake/rpc.cmake:40 (MESSAGE): Cannot find RPC development libraries. You need to install the required packages: Debian/Ubuntu: apt install libtirpc-dev RedHat/Fedora/Oracle Linux: yum install libtirpc-devel SuSE: zypper install glibc-devel 三、依赖 安装依赖： 注意： rpcgen源没有需下载 下载地址 [root@test mysql-8.0.25]# dnf -y install openssl-devel [root@test mysql-8.0.25]# dnf -y install ncurses-devel [root@test mysql-8.0.25]# rm -rf CMakeCache.txt [root@test mysql-8.0.25]# yum -y install libtirpc-devel [root@test mysql-8.0.25]# wget http://mirror.centos.org/centos/8/PowerTools/aarch64/os/Packages/rpcgen-1.3.1-4.el8.aarch64.rpm [root@test mysql-8.0.25]# dnf --enablerepo=powertools install rpcgen 再次构建： [root@test mysql-8.0.25]# cmake . \\ -DCMAKE_INSTALL_PREFIX=/usr/local/mysql/ \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci \\ -DENABLED_LOCAL_INFILE=ON \\ -DWITH_INNODB_MEMCACHED=ON \\ -DWITH_SSL=system \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_FEDERATED_STORAGE_ENGINE=1 \\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\ -DWITH_ARCHIVE_STORAGE_ENGINE=1 \\ -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\ -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \\ -DCOMPILATION_COMMENT=&quot;zsd edition&quot; \\ -DWITH_BOOST=/usr/local/mysql/mysql-8.0.25/boost/boost_1_73_0/ \\ -DMYSQL_UNIX_ADDR=/usr/local/mysql/3306/mysql.sock \\ -DSYSCONFDIR=/usr/local/mysql/data/3306 \\ -DFORCE_INSOURCE_BUILD=1 [root@test mysql-8.0.25]# make -j4 [root@test mysql-8.0.25]# make install 配置用户创建MySQL用户和用户组 [root@test mysql]# groupadd mysql [root@test mysql]# useradd -r -g mysql -s /bin/false mysql 初始化数据目录① 修改目录权限 [root@test mysql]# chown -R mysql . ② 初始化数据目录 [root@test mysql]# bin/mysqld --initialize --user=mysql 通过mysqld初始化data目录时，如果使用--initialize选项，则会为'root'@'localhost'用户创建一个随机密码。该密码会打印在控制台，如下所示行中末尾就是临时密码： 2021-07-18T13:02:48.598005Z 0 [System] [MY-013169] [Server] /usr/local/mysql/bin/mysqld (mysqld 8.0.25) initializing of server in progress as process 87376 2021-07-18T13:02:48.621612Z 0 [Warning] [MY-013242] [Server] --character-set-server: 'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous. 2021-07-18T13:02:48.621622Z 0 [Warning] [MY-013244] [Server] --collation-server: 'utf8_general_ci' is a collation of the deprecated character set UTF8MB3. Please consider using UTF8MB4 with an appropriate collation instead. 2021-07-18T13:02:48.632207Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started. 2021-07-18T13:02:49.645548Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended. 2021-07-18T13:02:51.981723Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: e2%TeUjfTg0N 复制启动脚本、启动 [root@test mysql]# cp support-files/mysql.server /etc/init.d/mysqld 启动失败（报错） 原因：启动时候没有找到对应3306目录 [root@test mysql]# /etc/init.d/mysqld start Starting MySQL.Logging to '/usr/local/mysql/data/test.err'. 2021-07-18T15:13:37.356447Z mysqld_safe Directory '/usr/local/mysql/3306' for UNIX socket file don't exists. The server quit without updating PID file (/usr/local/mysql[失败]test.pid). 解决方法： [root@test mysql]# mkdir 3306 [root@test mysql]# chown mysql:mysql 3306/ 重新启动： [root@test mysql]# bin/mysqld_safe --user=mysql &amp; MySQL命令软连接到/usr/local/bin/mysql用户可以方便使用MySQL命令 [root@test bin]# ln -s /usr/local/mysql/bin/mysql /usr/local/bin/mysql 登陆数据库： [root@test mysql]# bin/mysql -uroot -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 10 Server version: 8.0.25 Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. mysql&gt; show databases; ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. ERROR报错:{需要重置密码} mysql&gt; alter user 'root'@'localhost' identified with mysql_native_password by '123456'","link":"/blog/2021/07/18/MySQL%E9%83%A8%E7%BD%B2/"},{"title":"Nginx","text":"nginx是什么     我们在学习Nginx时也采用同样的方式,先来看看Nginx的竞争对手——Apache、Lighttpd、Tomcat、Jetty、IIS,它们都是Web服务器,或者叫做WWW(World Wide Web)服务器,相应地也都具备Web服务器的基本功能:基于REST架构风格 [1] ,以统一资源描述符(Uniform Resource Identifier,URI)或者统一资源定位符(Uniform Resource Locator,URL)作为沟通依据,通过HTTP为浏览器等客户端程序提供各种网络服务。     Tomcat和Jetty面向Java语言,先天就是重量级的Web服务器,它的性能与Nginx没有可比性。 apache的特点     Apache有许多优点,如稳定、开源、跨平台等,但它出现的时间太长了,在它兴起的年代,互联网的产业规模远远比不上今天,所以它被设计成了一个重量级的、不支持高并发的Web服务器。 为什么选择Nginx 更快这表现在两个方面:一方面,在正常情况下,单次请求会得到更快的响应;另一方面,在高峰期(如有数以万计的并发请求),Nginx可以比其他Web服务器更快地响应请求； 高扩展性Nginx的设计极具扩展性,它完全是由多个不同功能、不同层次、不同类型且耦合度极低的模块组成； 高可靠性高可靠性是我们选择Nginx的最基本条件,因为Nginx的可靠性是大家有目共睹的,很多家高流量网站都在核心服务器上大规模使用Nginx； 低内存消耗一般情况下,10000个非活跃的HTTP Keep-Alive连接在Nginx中仅消耗2.5MB的内存,这是Nginx支持高并发连接的基础； 单机支持10万以上的并发连接这是一个非常重要的特性!随着互联网的迅猛发展和互联网用户数量的成倍增长,各大公司、网站都需要应付海量并发请求,一个能够在峰值期顶住10万以上并发请求的Server,无疑会得到大家的青睐； 热部署master管理进程与worker工作进程的分离设计,使得Nginx能够提供热部署功能,即可以在7×24小时不间断服务的前提下,升级Nginx的可执行文件； 最自由的BSD许可协议这是Nginx可以快速发展的强大动力。BSD许可协议不只是允许用户免费使用Nginx,它还允许用户在自己的项目中直接使用或修改Nginx源码,然后发布； Apache拥有丰富的模块组件支持，稳定性强，BUG少，动态内容处理强。 Nginx轻量级，占用资源少，负载均衡，高并发处理强，静态内容处理高效 部署Nginx服务官网获取软件包下载适合您的版本以下是做测试用的版本 # wget http://nginx.org/download/nginx-\u00101.15.5.tar.gz 如果您的主机上没有wget命令请安装Centos RedHat 版本\u0010: # sudo yum -y install wget ubuntu Depin系列: # sudo apt install wget 安装：# mkdir /usr/local/nginx # mv nginx-1.15.5.tar.gz /usr/local/nginx/ # cd /usr/local/nginx/ # tar xf nginx-1.15.5.tar.gz # cd nginx-1.15.5 # yum -y install gcc gcc-c++ pcre-devel zlib-devel # ./configure --prefix=/usr/local/nginx/ # make &amp;&amp; make install 启动服务/usr/local/nginx/sbin/nginx 选项 nginx -s stop|quit|raload|reopen 解释 stop — fast shutdown                                # 快速关机 quit — graceful shutdown                          # 优雅关机 reload — reloading the configuration file     # 重新加载配置文件 reopen — reopening the log files               # 重新代开日志文件 查看服务:默认是80端口ps -ax | grep nginx 搭建虚拟主机创建虚拟主机配置文件# mkdir /usr/local/nginx/html/{gtxi,gtjb} # echo &quot;gongtongxuexi.com&quot; &gt; /usr/local/nginx/html/gtxi/index.html # echo &quot;gongtongjinbu.com&quot; &gt; /usr/local/nginx/html/gtjb/index.html 编辑配置文件：配置文件所在位置 /usr/local/nginx/conf/nginx.conf在配置文件定义虚拟主机加入: server { listen 8080; # listen somename:8080; server_name www.gongtongxuexi.com; location / { root html/gtxi; index index.html index.htm; } } server { listen 8081; # listen somename:8080; server_name www.gongtongjinbu.com; location / { root html/gtjb; index index.html index.htm; } } 重新加载配置文件：/usr/local/nginx/sbin/nginx -s raload 验证：打开浏览器访问 http//iP地址 配置文件解释：keepalive_timeout 65; # 设置连接超时时间 # 使用server定义虚拟主机 server { listen 80; # 监听端口 server_name localhost; # 访问域名 #charset koi8-r; # 编码格式 # 设置虚拟主机的访问日志 #access_log logs/host.access.log main; # 对URL进行匹配 location / { # 设置网页根路径 root html; # 先找html文件，如果没有则htm index index.html index.htm; } HTTPS server # #server { # listen 443 ssl; 监听端口 # server_name localhost; 访问域名 指定证书文件，使用相对路径证书需要在与Nginx.conf同目录下 # ssl_certificate cert.pem; # ssl_certificate_key cert.key; 指定会话缓存 # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / { # root html; # index index.html index.htm; # } 网站的错误代码： 1xx: 代表提示信息 2xx: 代表成功信息 3xx: 代表重定向 4xx：代表客户端错误信息 5xx: 代表服务器错误信息 Nginx实现反向代理代理服务器1、什么是代理服务器代理服务器，客户机在发送请求时，不会直接发送给目的主机，而是先发送给代理服务器，代理服务接受客户机请求之后，再向主机发出，并接收目的主机返回的数据，存放在代理服务器的硬盘中，再发送给客户机。2、为什么要使用代理服务器1）提高访问速度由于目标主机返回的数据会存放在代理服务器的硬盘中，因此下一次客户再访问相同的站点数据时，会直接从代理服务器的硬盘中读取，起到了缓存的作用，尤其对于热门站点能明显提高请求速度。2）防火墙作用 由于所有的客户机请求都必须通过代理服务器访问远程站点，因此可在代理服务器上设限，过滤某些不安全信息。3）通过代理服务器访问不能访问的目标站点 互联网上有许多开发的代理服务器，客户机在访问受限时，可通过不受限的代理服务器访问目标站点，通俗说，我们使用的翻墙浏览器就是利用了代理服务器，虽然不能出国，但也可直接访问外网。 反向代理 VS 正向代理1、什么是正向代理？什么是反向代理？ 正向代理，架设在客户机与目标主机之间，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。 反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器的工作量，将客户机请求转发给内部网络上的目标服务器；并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器与目标主机一起对外表现为一个服务器。 2、反向代理有哪些主要应用？ 现在许多大型web网站都用到反向代理。除了可以防止外网对内网服务器的恶性攻击、缓存以减少服务器的压力和访问安全控制之外，还可以进行负载均衡，将用户请求分配给多个服务器。 upstream web1.com{ server 192.168.122.206; } upstream web2.com{ server 192.168.122.84; } server { listen 80; # listen someme:8080; server_name www.web1.com; location / { proxy_pass http://web1.com; index index.html index.htm; } } server { listen 80; # listen somename:8080; server_name www.web2.com; location / { proxy_pass http://web2.com; index index.html index.htm; } }","link":"/blog/2021/07/16/Nginx/"},{"title":"PSSH","text":"批量管理服务器PSSH简介PSSH提供OpenSSH和相关工具的并行版本。包括pssh，pscp，prsync，pnuke和pslurp。该项目包括psshlib，可以在自定义应用程序中使用。 pssh是python编写，可以并发在多台机器上批量执行命令的工具，用法可以媲美ansible的一些简单用法，执行起来速度比ansible快，支持文件并行复制，远程命令。 安装安装之前首先获取epel源 # wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo # yum repolist 安装pssh # yum -y install pssh 功能： pssh 在多个主机上并行运行命令 pscp 把文件并行复制到多个主机上 prsync 通过rsync协议把文件高效并行复制到多个主机上 pslurp 把文件并行地从多个远程主机复制到中心主机上 pnuke 并行地在多个远程主机上杀死进程 使用方法PSSH示例及验证： pssh -h hosts.txt -l irb2 -o /tmp/foo uptime pssh -h hosts.txt &quot;hostnamectl&quot; hosts 主机IP 选项解释： --version 版本显示程序的版本号和退出 --help 显示帮助信息 -h HOST_FILE, 主机文件列表 格式[user@]host[:port] -l USER 用户名 (OPTIONAL) -p PAR，--par = PAR并行线程的最大数量（可选） -o OUTDIR， --outdir = OUTDIR 标准输出文件的输出目录（可选） -e ERRDIR， --errdir = ERRDIR stderr文件的输出目录（可选） -t TIMEOUT，--timeout =超时 每个主机的超时时间（秒）（0 =无超时）（可选） -O OPTION， --option = OPTION SSH选项（可选） -v，--verbose 打开警告和诊断消息（可选） -A，-askpass 要求输入密码（可选） -x ARGS，--extra-args = ARGS 额外的命令行参数，处理空格，引号和反斜杠 -X ARG， --extra-arg = ARG 额外的命令行参数 -i，--inline 每个服务器的内联内联聚合输出和错误 --inline-stdout 每个服务器的内联标准输出 -I，--send-input 从标准输入读取并作为输入发送到ssh -P，--print 打印输出 实验：1.在控制端主机上建立一个主机文件hosts.txt # cat hosts.txt 172.16.127.161 172.16.127.131 2.实现远程控制获取被控主机IP地址 # pssh -h hosts.txt -i 'ip addr show| grep ens33' 如果没有报错的话，应该输出类似实验下面的 [1] 22:42:03 [SUCCESS] 172.16.127.131 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 inet 172.16.127.131/24 brd 172.16.127.255 scope global noprefixroute dynamic ens33 [2] 22:42:03 [SUCCESS] 172.16.127.161 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 inet 172.16.127.161/24 brd 172.16.127.255 scope global noprefixroute dynamic ens33 如果有以下错误 [1] 22:40:24 [FAILURE] 172.16.127.131 Exited with error code 255 Stderr: The authenticity of host '172.16.127.131 (172.16.127.131)' can't be established. ECDSA key fingerprint is SHA256:TikjI/UUYTvpaoAt/CsGWH5Tjj/tlSRIMUFHwjydpBY. ECDSA key fingerprint is MD5:03:f9:94:2d:8b:a7:16:1b:a4:91:e4:9b:d6:1b:0d:4d. Are you sure you want to continue connecting (yes/no)? Host key verification failed. 原因是因为不能远程连接被控主机上，所以我们需要做免密认证， # ssh-keygen 创建私钥和公钥 # ssh-copy-id 把公钥copy给每台被控主机 pscp 示例及验证： 作用： 把文件并行复制到多个主机上 实验：1.创建一个测试文件text.txt # echo &quot;nihao&quot; &gt; text.txt 2.远程将主机文件复制到被控端主机上 # pscp.pssh -h hosts.txt text.txt /opt/text.txt [1] 23:02:17 [SUCCESS] 172.16.127.161 [2] 23:02:18 [SUCCESS] 172.16.127.131 prsync 示例： 作用： 通过rsync协议协议将文件或目录从本地主机同步到远程多个主机上 pnuke 示例及验证： 作用： 并行地在多个远程主机上杀死进程 实验杀死进程 安装Apache # pssh -h hosts.txt -i &quot;yum -y install httpd&quot; 开启Apache web服务 # pssh -h hosts.txt -i &quot;systemctl start httpd&quot; [1] 00:32:33 [SUCCESS] 172.16.127.131 [2] 00:32:33 [SUCCESS] 172.16.127.161 查看进程(验证) # pssh -h hosts.txt -i &quot;lsof -i:80&quot; [1] 00:36:46 [SUCCESS] 172.16.127.161 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME httpd 11710 root 4u IPv6 37706 0t0 TCP *:http (LISTEN) httpd 11711 apache 4u IPv6 37706 0t0 TCP *:http (LISTEN) httpd 11712 apache 4u IPv6 37706 0t0 TCP *:http (LISTEN) httpd 11713 apache 4u IPv6 37706 0t0 TCP *:http (LISTEN) httpd 11714 apache 4u IPv6 37706 0t0 TCP *:http (LISTEN) httpd 11715 apache 4u IPv6 37706 0t0 TCP *:http (LISTEN) [2] 00:36:46 [SUCCESS] 172.16.127.131 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME httpd 9307 root 4u IPv6 34309 0t0 TCP *:http (LISTEN) httpd 9308 apache 4u IPv6 34309 0t0 TCP *:http (LISTEN) httpd 9309 apache 4u IPv6 34309 0t0 TCP *:http (LISTEN) httpd 9310 apache 4u IPv6 34309 0t0 TCP *:http (LISTEN) httpd 9312 apache 4u IPv6 34309 0t0 TCP *:http (LISTEN) httpd 9313 apache 4u IPv6 34309 0t0 TCP *:http (LISTEN) 杀死进程 # pnuke -h hosts.txt httpd [1] 00:38:39 [SUCCESS] 172.16.127.131 [2] 00:38:39 [SUCCESS] 172.16.127.161 查看进程(验证) # pssh -h hosts.txt -i &quot;lsof -i:80&quot; [1] 00:39:55 [FAILURE] 172.16.127.161 Exited with error code 1 [2] 00:39:55 [FAILURE] 172.16.127.131 Exited with error code 1 三台 关闭firewalld","link":"/blog/2021/07/16/PSSH/"},{"title":"MySQL部署（Yum安装)","text":"Yum源安装 MySQL 安装数据库 Redhat6/CentOS6版本 [root@mysql-server ~]# yum -y install mysql mysql-server Redhat7/CentOS7版本以上 [root@mysql-server ~]# yum -y install mariadb mariadb-server 启动数据库 [root@mysql-server ~]# systemctl start mariadb 源码编译安装登陆数据库 默认MySQL数据库是没有密码 [root@web-server /]# mysql Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 2 Server version: 5.5.68-MariaDB MariaDB Server Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]&gt; 为了数据库的安装我们需要初始化以及设置密码 初始化数据库 [root@web-server /]# mysql_secure_installation 初始化完成再次登陆 (需要 用户+ 密码 ) [root@web-server /]# mysql -uroot -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 11 Server version: 5.5.68-MariaDB MariaDB Server Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]&gt; 连接数据库方式","link":"/blog/2021/10/10/install.mysql/"}],"tags":[{"name":"自动化","slug":"自动化","link":"/blog/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"MySQL","slug":"MySQL","link":"/blog/tags/MySQL/"},{"name":"Web","slug":"Web","link":"/blog/tags/Web/"}],"categories":[{"name":"自动化","slug":"自动化","link":"/blog/categories/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"&lt;font color &#x3D; green &gt;监控系统&lt;&#x2F;font&gt;","slug":"font-color-green-监控系统-font","link":"/blog/categories/font-color-green-%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F-font/"},{"name":"数据库","slug":"数据库","link":"/blog/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"web服务","slug":"web服务","link":"/blog/categories/web%E6%9C%8D%E5%8A%A1/"}]}